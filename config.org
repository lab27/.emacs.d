* Configuration (from Phil)


 #+BEGIN_SRC emacs-lisp
   (add-to-list 'org-structure-template-alist
    '("m" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">?</src>"))
 #+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)

(setq package-archives
  '(("gnu" . "https://elpa.gnu.org/packages/")
    ("marmalade" . "https://marmalade-repo.org/packages/")
    ("melpa" . "https://melpa.org/packages/")))

(package-initialize)

(defun package (pkg)
  (unless (package-installed-p pkg)
    (package-install pkg)))
#+END_SRC

*** projectile
[[http://projectile.readthedocs.io/en/latest/][Projectile Docs]]
| =C-c p f=   | Display a list of all files in the project.                  |
| =C-c p s g= | Run grep on the files in the project.                        |
| =C-c p r=   | Runs interactive query-replace on all files in the projects. |
| =C-c p C-h= | Help                                                         |
#+BEGIN_SRC emacs-lisp
  (package 'projectile)

  (projectile-global-mode)

  (global-set-key (kbd "C-x f") 'projectile-find-file)
#+END_SRC

* navigation
These customizations make it easier for you to navigate files,
switch buffers, and choose options from the minibuffer.


"When several buffers visit identically-named files,
Emacs must give the buffers distinct names. The usual method
for making buffer names unique adds ‘<2>’, ‘<3>’, etc. to the end
of the buffer names (all but one of them).
The forward naming method includes part of the file's directory
name at the beginning of the buffer name
https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

Turn on recent file mode so that you can more easily switch to
recently edited files when you first start emacs
#+BEGIN_SRC emacs-lisp
(setq recentf-save-file (concat user-emacs-directory ".recentf"))
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 40)
#+END_SRC

*** magit (=F5=/=C-x g=)
[[https://magit.vc/][Magit Website]]
#+BEGIN_SRC emacs-lisp
  (package 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "<f5>") 'magit-status)
#+END_SRC

ido-mode allows you to more easily navigate choices. For example,
when you want to switch buffers, ido presents you with a list
of buffers in the the mini-buffer. As you start to type a buffer's
name, ido will narrow down the list of buffers to match the text
you've typed in
http://www.emacswiki.org/emacs/InteractivelyDoThings
#+BEGIN_SRC emacs-lisp
  (package 'ido-ubiquitous)

  (ido-mode t)


  ;; This allows partial matches, e.g. "tl" will match "Tyrion Lannister"
  (setq ido-enable-flex-matching t)

  ;; Turn this behavior off because it's annoying
  (setq ido-use-filename-at-point nil)

  ;; Don't try to match file across all "work" directories; only match files
  ;; in the current directory displayed in the minibuffer
  (setq ido-auto-merge-work-directories-length -1)

  ;; Includes buffer names of recently open files, even if they're not
  ;; open now
  (setq ido-use-virtual-buffers t)

  ;; This enables ido in all contexts where it could be useful, not just
  ;; for selecting buffer and file names
  (ido-ubiquitous-mode 1)

  ;; Shows a list of buffers
  (global-set-key (kbd "C-x C-b") 'ibuffer)


  ;; Enhances M-x to allow easier execution of commands. Provides
  ;; a filterable list of possible commands in the minibuffer
  ;; http://www.emacswiki.org/emacs/Smex

  (package 'smex)
  (setq smex-save-file (concat user-emacs-directory ".smex-items"))
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)




  ;; projectile everywhere!
  (projectile-global-mode)
#+END_SRC

* tuning
#+BEGIN_SRC emacs-lisp

  (add-hook 'before-save-hook 'delete-trailing-whitespace)
 (show-paren-mode 1)
  (setq backup-directory-alist `(("." . "~/.saves")))

;; These customizations change the way emacs looks and disable/enable
;; some user interface elements. Some useful customizations are
;; commented out, and begin with the line "CUSTOMIZE". These are more
;; a matter of preference and may require some fiddling to match your
;; preferences

;; Turn off the menu bar at the top of each frame because it's distracting
(menu-bar-mode -1)
(tool-bar-mode 0)

;; Show line numbers
(global-linum-mode)

;; You can uncomment this to remove the graphical toolbar at the top. After
;; awhile, you won't need the toolbar.
;; (when (fboundp 'tool-bar-mode)
;;   (tool-bar-mode -1))

;; Don't show native OS scroll bars for buffers because they're redundant
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))

;; Color Themes
;; Read http://batsov.com/articles/2012/02/19/color-theming-in-emacs-reloaded/
;; for a great explanation of emacs color themes.
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html
;; for a more technical explanation.
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(add-to-list 'load-path "~/.emacs.d/themes")
(load-theme 'tomorrow-night-bright t)

;; increase font size for better readability
(set-face-attribute 'default nil :height 140)

;; Uncomment the lines below by removing semicolons and play with the
;; values in order to set the width (in characters wide) and height
;; (in lines high) Emacs will have whenever you start it
(setq initial-frame-alist '((top . 0) (left . 0) (width . 80) (height . 20)))

;; These settings relate to how emacs interacts with your operating system
(setq ;; makes killing/yanking interact with the clipboard
      x-select-enable-clipboard t

      ;; I'm actually not sure what this does but it's recommended?
      x-select-enable-primary t

      ;; Save clipboard strings into kill ring before replacing them.
      ;; When one selects something in another program to paste it into Emacs,
      ;; but kills something in Emacs before actually pasting it,
      ;; this selection is gone unless this variable is non-nil
      save-interprogram-paste-before-kill t

      ;; Shows all options when running apropos. For more info,
      ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
      apropos-do-all t

      ;; Mouse yank commands yank at point instead of at click.
      mouse-yank-at-point t)

;; No cursor blinking, it's distracting
(blink-cursor-mode 0)

;; full path in title bar
(setq-default frame-title-format "%b (%f)")

;; don't pop up font menu
(global-set-key (kbd "s-t") '(lambda () (interactive)))

;; no bell
(setq ring-bell-function 'ignore)
#+END_SRC

*** JavaScript
#+BEGIN_SRC emacs-lisp
  (package 'js2-mode)
  ;;(package 'js2-refactor)

  (add-hook 'js-mode-hook 'js2-minor-mode)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  (setq js-indent-level 2)
  (setq js2-basic-offset 2)
  (setq js2-strict-missing-semi-warning nil)
#+END_SRC
**** tern
#+BEGIN_SRC emacs-lisp
  (package 'tern)
  (package 'tern-auto-complete)

  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
  (add-hook 'coffee-mode-hook (lambda () (tern-mode t)))

  (eval-after-load 'tern
    '(progn
       (require 'tern-auto-complete)
       (tern-ac-setup)))
#+END_SRC
*** css, sass, scss
#+BEGIN_SRC emacs-lisp
  (package 'sass-mode)

  (setq css-indent-offset 2)
#+END_SRC
*** Other modes & packages
#+BEGIN_SRC emacs-lisp
  (package 'markdown-mode)
  (package 'yaml-mode)
  (package 'impatient-mode)
  (package 'web-mode)
  (package 'haml-mode)

  (package 'multiple-cursors)
  (package 'paredit)
  (package 'yaml-tomato)
  (package 'emmet-mode)
(add-hook 'html-mode-hook 'emmet-mode)

  (package 'yasnippet)
(yas-global-mode 1)
#+END_SRC

** Custom Functions
*** Indent Buffer (C-`)
#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max) nil)))
  (global-set-key (kbd "C-`") 'indent-buffer)
#+END_SRC


*** free-keys
Provides a function =free-keys=, that shows free keybindings for
modkeys or prefixes.

- [[https://github.com/Fuco1/free-keys][Github]]
#+BEGIN_SRC emacs-lisp
  (package 'free-keys)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; On OS X, an Emacs instance started from the graphical user
;; interface will have a different environment than a shell in a
;; terminal window, because OS X does not run a shell during the
;; login. Obviously this will lead to unexpected results when
;; calling external utilities like make from Emacs.
;; This library works around this problem by copying important
;; environment variables from the user's shell.
;; https://github.com/purcell/exec-path-from-shell

    (package 'exec-path-from-shell)
;; Sets up exec-path-from shell
;; https://github.com/purcell/exec-path-from-shell
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-envs
   '("PATH")))

#+END_SRC

#+BEGIN_SRC emacs-lisp


;; Customizations relating to editing a buffer.

;; Key binding to use "hippie expand" for text autocompletion
;; http://www.emacswiki.org/emacs/HippieExpand
(global-set-key (kbd "M-/") 'hippie-expand)

;; Lisp-friendly hippie expand
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

;; Highlights matching parenthesis
(show-paren-mode 1)

;; Highlight current line
(global-hl-line-mode 1)

;; Interactive search key bindings. By default, C-s runs
;; isearch-forward, so this swaps the bindings.
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

;; Don't use hard tabs
(setq-default indent-tabs-mode nil)

;; When you visit a file, point goes to the last place where it
;; was when you previously visited the same file.
;; http://www.emacswiki.org/emacs/SavePlace
(require 'saveplace)
(setq-default save-place t)
;; keep track of saved places in ~/.emacs.d/places
(setq save-place-file (concat user-emacs-directory "places"))

;; comments
(defun toggle-comment-on-line ()
  "comment or uncomment current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
(global-set-key (kbd "C-;") 'toggle-comment-on-line)

;; yay rainbows!
(package 'rainbow-delimiters)
(global-rainbow-delimiters-mode t)

;; use 2 spaces for tabs
(defun die-tabs ()
  (interactive)
  (set-variable 'tab-width 2)
  (mark-whole-buffer)
  (untabify (region-beginning) (region-end))
  (keyboard-quit))

;; fix weird os x kill error
(defun ns-get-pasteboard ()
  "Returns the value of the pasteboard, or nil for unsupported formats."
  (condition-case nil
      (ns-get-selection-internal 'CLIPBOARD)
    (quit nil)))

(setq electric-indent-mode nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Changes all yes/no questions to y/n type
(fset 'yes-or-no-p 'y-or-n-p)

;; shell scripts
(setq-default sh-basic-offset 2)
(setq-default sh-indentation 2)

;; Go straight to scratch buffer on startup
(setq inhibit-startup-message t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Automatically load paredit when editing a lisp file
;; More at http://www.emacswiki.org/emacs/ParEdit
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)

;; eldoc-mode shows documentation in the minibuffer when writing code
;; http://www.emacswiki.org/emacs/ElDoc
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; javascript / html
(add-to-list 'auto-mode-alist '("\\.js$" . js-mode))
(add-hook 'js-mode-hook 'subword-mode)
(add-hook 'html-mode-hook 'subword-mode)
(setq js-indent-level 2)
(eval-after-load "sgml-mode"
  '(progn
     (require 'tagedit)
     (tagedit-add-paredit-like-keybindings)
     (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
#+END_SRC
